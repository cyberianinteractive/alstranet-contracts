// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

/**
 * @title ITerritoryRegistry
 * @dev Interface for the Territory Registry contract that defines territory zones and their properties
 */
interface ITerritoryRegistry {
    /**
     * @dev Structure to define a territory zone
     */
    struct Territory {
        string name;
        uint8 zoneType; // 1=High-Security, 2=Medium-Security, 3=No-Go Zone
        uint256 baseValue; // Base economic value
        uint256 resourceGenerationRate; // Resources generated per block
        uint8 controllingFaction; // 0=None, 1=Law Enforcement, 2=Criminal, 3=Vigilante
        uint256 lastUpdateBlock; // Last block when territory state was updated
        bool contested; // Whether territory is currently contested
    }

    /**
     * @dev Emitted when a new territory is created
     */
    event TerritoryCreated(uint256 indexed territoryId, string name, uint8 zoneType, uint256 baseValue);

    /**
     * @dev Emitted when a territory's controlling faction changes
     */
    event TerritoryControlChanged(uint256 indexed territoryId, uint8 oldFaction, uint8 newFaction);

    /**
     * @dev Emitted when a territory's economic value is updated
     */
    event TerritoryValueUpdated(uint256 indexed territoryId, uint256 oldValue, uint256 newValue);

    /**
     * @dev Emitted when a territory's contested status changes
     */
    event TerritoryContestedStatusChanged(uint256 indexed territoryId, bool contested);

    /**
     * @dev Creates a new territory
     * @param name The name of the territory
     * @param zoneType The type of zone (1=High-Security, 2=Medium-Security, 3=No-Go)
     * @param baseValue The base economic value of the territory
     * @param resourceGenerationRate The rate at which this territory generates resources
     * @return territoryId The ID of the created territory
     */
    function createTerritory(
        string calldata name,
        uint8 zoneType,
        uint256 baseValue,
        uint256 resourceGenerationRate
    ) external returns (uint256);

    /**
     * @dev Updates a territory's economic value
     * @param territoryId The ID of the territory
     * @param newValue The new economic value
     */
    function updateTerritoryValue(uint256 territoryId, uint256 newValue) external;

    /**
     * @dev Updates a territory's resource generation rate
     * @param territoryId The ID of the territory
     * @param newRate The new resource generation rate
     */
    function updateResourceGenerationRate(uint256 territoryId, uint256 newRate) external;

    /**
     * @dev Sets a territory's controlling faction
     * @param territoryId The ID of the territory
     * @param factionId The ID of the controlling faction (0=None, 1=Law Enforcement, 2=Criminal, 3=Vigilante)
     */
    function setControllingFaction(uint256 territoryId, uint8 factionId) external;

    /**
     * @dev Sets a territory's contested status
     * @param territoryId The ID of the territory
     * @param contested Whether the territory is contested
     */
    function setContestedStatus(uint256 territoryId, bool contested) external;

    /**
     * @dev Gets the details of a territory
     * @param territoryId The ID of the territory
     * @return name The name of the territory
     * @return zoneType The type of zone
     * @return baseValue The base economic value
     * @return resourceGenerationRate The resource generation rate
     * @return controllingFaction The controlling faction
     * @return lastUpdateBlock The last update block
     * @return contested Whether the territory is contested
     */
    function getTerritoryDetails(uint256 territoryId) external view returns (
        string memory name,
        uint8 zoneType,
        uint256 baseValue,
        uint256 resourceGenerationRate,
        uint8 controllingFaction,
        uint256 lastUpdateBlock,
        bool contested
    );

    /**
     * @dev Gets the number of territories
     * @return The total number of territories
     */
    function getTerritoriesCount() external view returns (uint256);

    /**
     * @dev Gets all territories controlled by a faction
     * @param factionId The ID of the faction
     * @return An array of territory IDs controlled by the faction
     */
    function getTerritoriesByFaction(uint8 factionId) external view returns (uint256[] memory);

    /**
     * @dev Calculates the current value of a territory based on its base value and other factors
     * @param territoryId The ID of the territory
     * @return The current economic value of the territory
     */
    function calculateTerritoryValue(uint256 territoryId) external view returns (uint256);

    /**
     * @dev Calculates the resources generated by a territory since the last update
     * @param territoryId The ID of the territory
     * @return The amount of resources generated
     */
    function calculateResourcesGenerated(uint256 territoryId) external view returns (uint256);
}